decorationsTable = {
	standard = {
		ul = {"+", "0", "f"},
		ur = {"+", "0", "f"},
		ll = {"+", "0", "f"},
		lr = {"+", "0", "f"},
		top = {"-", "0", "f"},
		bottom = {"-", "0", "f"},
		left = {"|", "0", "f"},
		right = {"|", "0", "f"},
		min = {"_", "0", "f"},
		max = {"M", "0", "f"},
		restore = {"R", "0", "f"},
		close = {"X", "e", "f"},
		caption = {"", "0", "f"},
	},
	menu = {
		ul = {"/", "0", "f"},
		ur = {"\\", "0", "f"},
		ll = {"\\", "0", "f"},
		lr = {"/", "0", "f"},
		top = {"-", "0", "f"},
		bottom = {"-", "0", "f"},
		left = {"|", "0", "f"},
		right = {"|", "0", "f"},
		min = {"_", "0", "f"},
		max = {"M", "0", "f"},
		restore = {"R", "0", "f"},
		close = {"X", "e", "f"},
		caption = {"", "0", "f"},
	},
	pretty = {
		ul = {" ", "0", "8"},
		ur = {" ", "0", "8"},
		ll = {" ", "0", "8"},
		lr = {" ", "0", "7"},
		top = {" ", "0", "8"},
		bottom = {" ", "0", "8"},
		left = {" ", "0", "8"},
		right = {" ", "0", "8"},
		min = {"-", "0", "b"},
		max = {"M", "0", "b"},
		restore = {"R", "0", "b"},
		close = {"X", "0", "e"},
		caption = {"", "f", "8"},
	},
	pretty_menu = {
		ul = {" ", "0", "8"},
		ur = {" ", "0", "8"},
		ll = {" ", "0", "8"},
		lr = {" ", "0", "8"},
		top = {" ", "0", "8"},
		bottom = {" ", "0", "8"},
		left = {" ", "0", "8"},
		right = {" ", "0", "8"},
		min = {"-", "0", "b"},
		max = {"M", "0", "b"},
		restore = {"R", "0", "b"},
		close = {"X", "0", "e"},
		caption = {"", "f", "8"},
	},
}

local window = {
	draw = function(self, mode)
		--render window to table of appropriate size.
		if not self.target.render then
			if not self.minimized then
				term.redirect(self.target)
				term.clear()
				local top = nil
				if self.caption then
					if string.len(self.caption) > self.w - 4 then
						top = self.decorations.ul[1]..self.decorations.top[1]..string.sub(self.caption, 1, self.w - 4)
					else
						top = self.decorations.ul[1]..self.decorations.top[1]..self.caption
					end
					top = top..string.rep(self.decorations.top[1], self.w - (string.len(top) + 1))..self.decorations.ur[1]
				else
					top = self.decorations.ul[1]..string.rep(self.decorations.top[1], self.w - 2)..self.decorations.ur[1]
				end
				term.setCursorPos(self.x, self.y)
				term.setTextColor(1)
				term.setBackgroundColor(32768)
				term.write(top)
				if self.windowType == "modal" or self.windowType == "standard" then
					term.setCursorPos(self.x + self.w - 4)
					term.write("-")
					if term.isColor() then term.setTextColor(16384) end
					term.write("X")
					term.setTextColor(1)
					if self.windowType == "standard" then
						term.setCursorPos(self.x + self.w - 6)
						if self.maximized then
							term.write("-_R")
						else
							term.write("-_M")
						end
					end
				end
				for i=1, self.h - 2 do
					term.setCursorPos(self.x, self.y + i)
					term.setTextColor(colors.white)
					term.setBackgroundColor(colors.black)
					term.write(self.decorations.left[1])
					for j=1, self.w - 2 do
						term.setTextColor(2 ^ tonumber(string.sub(self.redirect.buffer.textColor[i], j, j), 16))
						term.setBackgroundColor(2 ^ tonumber(string.sub(self.redirect.buffer.backColor[i], j, j), 16))
						term.write(string.sub(self.redirect.buffer.text[i], j, j))
					end
					term.setTextColor(colors.white)
					term.setBackgroundColor(colors.black)
					term.write(self.decorations.right[1])
				end
				term.setCursorPos(self.x, self.y + self.h - 1)
				term.write(self.decorations.ll[1]..string.rep(self.decorations.bottom[1], self.w - 2)..self.decorations.lr[1])
				term.setCursorPos(self.x + self.redirect.buffer.cursorX, self.y + self.redirect.buffer.cursorY)
				term.setCursorBlink(self.redirect.buffer.cursorBlink)
				term.restore()
			end
		else
			--use the render method.
			term.redirect(self.target)
			local maxX, maxY = term.getSize()
			local isColor = term.isColor()
			local outputBuffer = {text = {}, textColor = {}, backColor = {}}
			if not self.minimized then
				local prelineBuffer = self.x - 1
				local postlineBuffer = maxX - (self.x + self.w - 1)
				for i=1, maxY do
					if i == self.y then
						if self.caption then
							local caption = string.sub(self.caption, 1, self.w - 4)
							outputBuffer.text[i] = string.rep(" ", prelineBuffer)..self.decorations.ul[1]..self.decorations.top[1]..caption..string.rep(self.decorations.top[1], self.w - (string.len(caption) + 3))..self.decorations.ur[1]..string.rep(" ", postlineBuffer)
							outputBuffer.textColor[i] = string.rep("0", prelineBuffer)..self.decorations.ul[2]..self.decorations.top[2]..string.rep(self.decorations.caption[2], string.len(caption))..string.rep(self.decorations.top[2], self.w - (string.len(caption) + 3))..self.decorations.ur[2]..string.rep("0", postlineBuffer)
							outputBuffer.backColor[i] = string.rep("f", prelineBuffer)..self.decorations.ul[3]..self.decorations.top[3]..string.rep(self.decorations.caption[3], string.len(caption))..string.rep(self.decorations.top[3], self.w - (string.len(caption) + 3))..self.decorations.ur[3]..string.rep("f", postlineBuffer)
						else
							outputBuffer.text[i] = string.rep(" ", prelineBuffer)..self.decorations.ul[1]..string.rep(self.decorations.top[1], self.w - 2)..self.decorations.ur[1]..string.rep(" ", postlineBuffer)
							outputBuffer.textColor[i] = string.rep("0", prelineBuffer)..self.decorations.ul[2]..string.rep(self.decorations.top[2], self.w - 2)..self.decorations.ur[2]..string.rep("0", postlineBuffer)
							outputBuffer.backColor[i] = string.rep("f", prelineBuffer)..self.decorations.ul[3]..string.rep(self.decorations.top[3], self.w - 2)..self.decorations.ur[3]..string.rep("f", postlineBuffer)
						end
						if self.windowType == "modal" then
							outputBuffer.text[i] = string.sub(outputBuffer.text[i], 1, self.x + self.w - 5)..self.decorations.top[1]..self.decorations.close[1]..string.sub(outputBuffer.text[i], self.x + self.w - 2)
							outputBuffer.textColor[i] = string.sub(outputBuffer.textColor[i], 1, self.x + self.w - 5)..self.decorations.top[2]..self.decorations.close[2]..string.sub(outputBuffer.textColor[i], self.x + self.w - 2)
							outputBuffer.backColor[i] = string.sub(outputBuffer.backColor[i], 1, self.x + self.w - 5)..self.decorations.top[3]..self.decorations.close[3]..string.sub(outputBuffer.backColor[i], self.x + self.w - 2)
						elseif self.windowType == "standard" then
							if self.maximized then
								outputBuffer.text[i] = string.sub(outputBuffer.text[i], 1, self.x + self.w - 7)..self.decorations.top[1]..self.decorations.min[1]..self.decorations.restore[1]..self.decorations.close[1]..string.sub(outputBuffer.text[i], self.x + self.w - 2)
								outputBuffer.textColor[i] = string.sub(outputBuffer.textColor[i], 1, self.x + self.w - 7)..self.decorations.top[2]..self.decorations.min[2]..self.decorations.restore[2]..self.decorations.close[2]..string.sub(outputBuffer.textColor[i], self.x + self.w - 2)
								outputBuffer.backColor[i] = string.sub(outputBuffer.backColor[i], 1, self.x + self.w - 7)..self.decorations.top[3]..self.decorations.min[3]..self.decorations.restore[3]..self.decorations.close[3]..string.sub(outputBuffer.backColor[i], self.x + self.w - 2)
							else
								outputBuffer.text[i] = string.sub(outputBuffer.text[i], 1, self.x + self.w - 7)..self.decorations.top[1]..self.decorations.min[1]..self.decorations.max[1]..self.decorations.close[1]..string.sub(outputBuffer.text[i], self.x + self.w - 2)
								outputBuffer.textColor[i] = string.sub(outputBuffer.textColor[i], 1, self.x + self.w - 7)..self.decorations.top[2]..self.decorations.min[2]..self.decorations.max[2]..self.decorations.close[2]..string.sub(outputBuffer.textColor[i], self.x + self.w - 2)
								outputBuffer.backColor[i] = string.sub(outputBuffer.backColor[i], 1, self.x + self.w - 7)..self.decorations.top[3]..self.decorations.min[3]..self.decorations.max[3]..self.decorations.close[3]..string.sub(outputBuffer.backColor[i], self.x + self.w - 2)
							end
						end
					elseif i > self.y and i < self.y + self.h - 1 then
						outputBuffer.text[i] = string.rep(" ", prelineBuffer)..self.decorations.left[1]..string.sub(self.redirect.buffer.text[i - self.y], 1, self.w - 2)..self.decorations.right[1]..string.rep(" ", postlineBuffer)
						--initial -1 means we don't catch the window decoration, final -1 for same reason (was 0 and -2 when we were catching the decorations.)
						outputBuffer.textColor[i] = string.rep("0", prelineBuffer)..self.decorations.left[2]..string.sub(self.redirect.buffer.textColor[i - self.y], 1, self.w - 2)..self.decorations.right[2]..string.rep("0", postlineBuffer)
						outputBuffer.backColor[i] = string.rep("f", prelineBuffer)..self.decorations.left[3]..string.sub(self.redirect.buffer.backColor[i - self.y], 1, self.w - 2)..self.decorations.right[3]..string.rep("f", postlineBuffer)
					elseif i == self.y + self.h - 1 then
						outputBuffer.text[i] = string.rep(" ", prelineBuffer)..self.decorations.ll[1]..string.rep(self.decorations.bottom[1], self.w - 2)..self.decorations.lr[1]..string.rep(" ", postlineBuffer)
						outputBuffer.textColor[i] = string.rep("0", prelineBuffer)..self.decorations.ll[2]..string.rep(self.decorations.bottom[2], self.w - 2)..self.decorations.lr[2]..string.rep("0", postlineBuffer)
						outputBuffer.backColor[i] = string.rep("f", prelineBuffer)..self.decorations.ll[3]..string.rep(self.decorations.bottom[3], self.w - 2)..self.decorations.lr[3]..string.rep("f", postlineBuffer)
					else
						outputBuffer.text[i] = string.rep(" ", maxX)
						outputBuffer.textColor[i] = string.rep("0", maxX)
						outputBuffer.backColor[i] = string.rep("f", maxX)
					end
				end
				if self.target.setBounds then self.target.setBounds(self.x, self.y, self.x + self.w - 1, self.y + self.h - 1) end
			else
				for i=1, maxY do
					outputBuffer.text[i] = string.rep(" ", maxX)
					outputBuffer.textColor[i] = string.rep("0", maxX)
					outputBuffer.backColor[i] = string.rep("f", maxX)
				end
				if self.target.setBounds then self.target.setBounds(0, 0, 0, 0) end
			end
			self.target.render(outputBuffer)
			term.setCursorPos(self.x + self.redirect.buffer.cursorX, self.y + self.redirect.buffer.cursorY)
			term.setCursorBlink(self.redirect.buffer.cursorBlink)
			term.restore()
		end
	end,
	move = function(self, x, y)
		if x and y then
			local xlim, ylim = self.target.getSize()
			if (x < 1 or x + self.w - 1 > xlim) and (y < 1 or y + self.h - 1 > ylim) then
				return nil, "location out of bounds"
			end
			if x >= 1 and x + self.w - 1 <= xlim then
				self.x = x
			end
			if y >= 1 and y + self.h - 1 <= ylim then
				self.y = y
			end
			self:draw()
			return true
		else
			return nil, "must specify x and y"
		end
	end,
	resize = function(self, w, h)
		if w and h then
			local w = tonumber(w)
			local h = tonumber(h)
			local xlim, ylim = self.target.getSize()
			if self.x + w - 1 > xlim or self.y + h - 1 > ylim then
				return nil, "window sized out of bounds"
			end
			self.redirect.buffer.sizeX = w - 2
			self.redirect.buffer.sizeY = h - 2
			if w >= 5 and h >= 3 then
				--adjust buffer horizontal size, but don't bother adjusting things below the new window bottom if smaller
				if w < self.w then
					for i=1, math.min(#self.redirect.buffer.text, math.max(self.h, h) - 2) do
						--w less two because the window border is part of the size, but not the buffer.
						self.redirect.buffer.text[i] = string.sub(self.redirect.buffer.text[i],1,w - 2)
						self.redirect.buffer.textColor[i] = string.sub(self.redirect.buffer.textColor[i],1,w - 2)
						self.redirect.buffer.backColor[i] = string.sub(self.redirect.buffer.backColor[i],1,w - 2)
					end
				elseif w > self.w then
					for i=1, math.min(#self.redirect.buffer.text, math.max(self.h, h) - 2) do
						--no need for width subtractions, since we are adjusting based on the difference between the two.
						self.redirect.buffer.text[i] = self.redirect.buffer.text[i]..string.rep(" ", w - self.w)
						self.redirect.buffer.textColor[i] = self.redirect.buffer.textColor[i]..string.rep(self.redirect.buffer.curTextColor, w - self.w)
						self.redirect.buffer.backColor[i] = self.redirect.buffer.backColor[i]..string.rep(self.redirect.buffer.curBackColor, w - self.w)
					end
				end
				self.w = w
				if h < self.h then
					repeat
					--remove the last entry to trim the buffer.
					table.remove(self.redirect.buffer.text)
					table.remove(self.redirect.buffer.textColor)
					table.remove(self.redirect.buffer.backColor)
					until #self.redirect.buffer.text == h - 2
				elseif h > self.h then
					repeat
						table.insert(self.redirect.buffer.text, string.rep(" ", self.w - 2))
						table.insert(self.redirect.buffer.textColor, string.rep(self.redirect.buffer.curTextColor, self.w - 2))
						table.insert(self.redirect.buffer.backColor, string.rep(self.redirect.buffer.curBackColor, self.w - 2))
					until #self.redirect.buffer.text == h - 2
				end
				self.h = h
				self:draw()
				return true
			else
				return nil, "size too small"
			end
		else
			return nil, "must specify width and height"
		end
	end,
	destroy = function(self)
		if process.windowCompositor then
			process.windowCompositor:removeWindow(self)
		end
		self = nil
	end,
	setDecorations = function(self, decoration)
		if not decoration then
			return nil, "Invalid decoration"
		elseif type(decoration) == "string" then
			if decorationsTable[decoration] then
				for k,v in pairs(decorationsTable[decoration]) do
					self.decorations[k] = v
				end
			else
				return nil, "Invalid decoration"
			end
		elseif type(decoration == "table") then
			for k,v in pairs(decorationsTable.standard) do
				--check for completeness.
				if type(decoration[k]) ~= "table" or #decoration[k] < 3 then
					return nil, "Invalid decoration"
				end
			end
			for k,v in pairs(decoration) do
				self.decorations[k] = v
			end
		else
			return nil, "Invalid decoration"
		end
		self:draw()
	end,
	maximize = function(self)
		self.normalSize = {x = self.x, y = self.y, w = self.w, h = self.h}
		self:move(1, 1)
		self.maximized = true
		self:resize(self.target.getSize())
	end,
	minimize = function(self)
		self.minimized = true
		self:draw()
	end,
	unMinimize = function(self)
		self.minimized = false
		self:draw()
	end,
	restore = function(self)
		self.maximized = false
		self:resize(self.normalSize.w, self.normalSize.h)
		self:move(self.normalSize.x, self.normalSize.y)
	end,
	setType = function(self, winType)
		self.windowType = winType
		self:draw()
	end,
	setCaption = function(self, text)
		self.caption = text
		self:draw()
	end,
}

local wmetatable = {
	__index = window,
}

function new(w, h, x, y, caption, target)
	local win = {
		target = target or term.native,
		w = tonumber(w) or 19,
		h = tonumber(h) or 8,
		x = tonumber(x) or 1,
		y = tonumber(y) or 1,
		caption = caption or nil,
		--windowType: clean, standard, modal
		--clean is normal window, standard includes _MX controls, modal includes X control only.
		windowType = "clean",
		decorations = {
			ul = {"+", "0", "f"},
			ur = {"+", "0", "f"},
			ll = {"+", "0", "f"},
			lr = {"+", "0", "f"},
			top = {"-", "0", "f"},
			bottom = {"-", "0", "f"},
			left = {"|", "0", "f"},
			right = {"|", "0", "f"},
			min = {"_", "0", "f"},
			max = {"M", "0", "f"},
			restore = {"R", "0", "f"},
			close = {"X", "e", "f"},
			caption = {"", "0", "f"},
		},
		maximized = false,
		minimized = false,
	}
	local xlim, ylim = win.target.getSize()
	--x and y bounding for initial window.
	if win.x < 1 then
		win.x = 1
	elseif win.x + win.w - 1 > xlim then
		win.x = xlim - win.w + 1
	end
	if win.y < 1 then
		win.y = 1
	elseif win.y + win.h - 1 > ylim then
		win.y = ylim - win.h + 1
	end
	local _redirect = framebuffer.new(w - 2, h - 2, target.isColor())
	win.redirect = {}
	for k, v in pairs(_redirect) do
		if type(k) == "string" and type(v) == "function" then
			win.redirect[k] = function(...)
				local result = {_redirect[k](...)}
				win:draw()
				return unpack(result)
			end
		else
			win.redirect[k] = _redirect[k]
		end
	end
	setmetatable( win, wmetatable )
	return win
end
