local bootFromDisk = true
local sides = {"top","bottom","left","right","front","back"}
local bootOptions = {"/rom/.bios",}
local bootOrder = {"disk", 1,}

function loadOptions ()
	local options = {}
	if fs.exists("/.biosOptions") and not fs.isDir("/.biosOptions") then
		local file = fs.open("/.biosOptions")
		if file then
			local line = file.readLine()
			while line do
				table.insert( options, line )
				line = file.readLine()
			end
			file.close()
		end
	end
	if options then
		for _, line in pairs(options) do 
			value = string.match(line, "^local bootFromDisk = (%a+)$")
			if value ~= nil then
				if not value then
					bootFromDisk = false
				end
				break
			end
		end
		for _, line in pairs(options) do
			value = string.match(line, "^local bootOptions = {(.*)}$")
			if value then
				for v in string.gmatch(value, "\"([%w/%.]+)\",") do
					table.insert(bootOptions, v)
				end
				break
			end
		end
		for _, line in pairs(options) do
			value = string.match(line, "^local bootOrder = {(.*)}$")
			if value then
				bootOrder = {}
				for v in string.gmatch(value, "(%d+),") do
					table.insert(bootOrder, tonumber(v))
				end
				break
			end
		end
	end


function biosOptions ()
	term.setCursorPos(1,1)
	term.write("WTF")
end

function biosLoad (path)
	local file = fs.open(path, "r")
	if file then
		local func, err = loadstring(file.readAll(), fs.getName(path))
		file.close()
		if not func then return nil, err end
		return func
	end
	return nil, "Error opening file "..path
end

os.startTimer(1)
while true do
	evt, param = coroutine.yield()
	if evt == "key" then
		biosOptions()
		break
	elseif evt == "timer" then
		break
	end
end

local biosFunc

for _, device in ipairs(bootOrder) do
	if biosFunc then break end
	if device == "disk" and bootFromDisk then
		for _,side in ipairs(sides) do
			if peripheral.isPresent and peripheral.getType(side) == "drive" then
				if peripheral.call(side, "hasData") then
					local diskPath = fs.combine(peripheral.call(side, "getMountPath"), ".bios")
					if fs.exists(diskPath) and not fs.isDir(diskPath) then
						biosFunc = biosLoad(diskPath)
						if biosFunc then break end
					end
				end
			end
		end
	else
		if bootOptions[device] then
			biosFunc = biosLoad(bootOptions[device])